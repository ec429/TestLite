/* Steal all the TESTFLIGHT configs to create our ModuleTestLite cfgs.
 * Largely based on the RO MM patches that normally turn those same TESTFLIGHT
 * configs into various TF module cfgs.
 */

// Preprocess
@PART[*]:HAS[@TESTFLIGHT[*]]:FOR[zTestFlight]
{
	@TESTFLIGHT,*:HAS[~name[]]
	{
		name = TFGenericMissingName
	}

	@TESTFLIGHT,*:HAS[~techTransfer[]]
	{
		techTransfer =
	}
	@TESTFLIGHT,*:HAS[~techTransferGenerationPenalty[]]
	{
		techTransferGenerationPenalty = 0.05
	}
	@TESTFLIGHT,*
	{
		kinkV = 0.75
		kinkH = 0.25
		kinkW = 0.5
		
		numThings = 1.0
		
		dataMult = 1.0
	}
	@TESTFLIGHT,*:HAS[#reliabilityMidV[*]]
	{
		@kinkV = #$reliabilityMidV$
	}
	@TESTFLIGHT,*:HAS[#reliabilityMidTangentWeight[*]]
	{
		@kinkW = #$reliabilityMidTangentWeight$
	}
	@TESTFLIGHT,*:HAS[#reliabilityMidH[*]]
	{
		@kinkH = #$reliabilityMidH$
	}
	@TESTFLIGHT,*:HAS[#reliabilityDataRateMultiplier[*]]
	{
		@dataMult = #$reliabilityDataRateMultiplier$
	}
	@TESTFLIGHT,*:HAS[#techTransfer[*]]
	{
		@tech = #$techTransfer$
	}
	@TESTFLIGHT,*:HAS[#clusterMultiplier[*]]
	{
		@numThings = #$clusterMultiplier$
	}
	@TESTFLIGHT,*:HAS[~ratedContinuousBurnTime[]]
	{
		ratedContinuousBurnTime = #$ratedBurnTime$
	}
	@TESTFLIGHT,*:HAS[#testedBurnTime[*]]
	{
		overBurnTime = #$testedBurnTime$
		@overBurnTime -= #$ratedContinuousBurnTime$
	}
	@TESTFLIGHT,*:HAS[~testedBurnTime[]]
	{
		// default rule is max overburn duration same as burn duration
		overBurnTime = #$ratedContinuousBurnTime$
		// halve it to get the median
		@overBurnTime /= 2
	}
	@TESTFLIGHT,*:HAS[~thrustModifier[]]
	{
		// placeholder flat curve
		thrustModifier
		{
			key = 0 1
			key = 1 1
		}
	}
	@TESTFLIGHT,*:HAS[~explicitDataRate[?rue]]
	{
		@dataMult *= 640 // normalized to rate=4 at 160s burntime
		@dataMult /= #$ratedContinuousBurnTime$
	}
	@TESTFLIGHT,*:HAS[~isSolid[]]
	{
		isSolid = False
	}
	// solids default to no Q penalty, others to 1.0 factor
	@TESTFLIGHT,*:HAS[~isSolid[?rue]]
	{
		&ignitionDynPresFailMultiplier = 1.0
	}
	@TESTFLIGHT,*
	{
		@ignitionReliabilityStart *= -1
		@ignitionReliabilityStart += 1
		@ignitionReliabilityStart *= #$numThings$
		@ignitionReliabilityStart -= 1
		@ignitionReliabilityStart *= -1
		
		@ignitionReliabilityEnd *= -1
		@ignitionReliabilityEnd += 1
		@ignitionReliabilityEnd *= #$numThings$
		@ignitionReliabilityEnd -= 1
		@ignitionReliabilityEnd *= -1
		
		@cycleReliabilityStart *= -1
		@cycleReliabilityStart += 1
		@cycleReliabilityStart *= #$numThings$
		@cycleReliabilityStart -= 1
		@cycleReliabilityStart *= -1
		
		@cycleReliabilityEnd *= -1
		@cycleReliabilityEnd += 1
		@cycleReliabilityEnd *= #$numThings$
		@cycleReliabilityEnd -= 1
		@cycleReliabilityEnd *= -1
		
		@dataMult *= #$numThings$
		
		
		failChanceStart = #$cycleReliabilityStart$
		@failChanceStart *= -1
		@failChanceStart += 1
		@failChanceStart /= #$ratedBurnTime$
		failChanceEnd = #$cycleReliabilityEnd$
		@failChanceEnd *= -1
		@failChanceEnd += 1
		@failChanceEnd /= #$ratedBurnTime$
	}
}

// Create the nodes.
@PART[*]:HAS[@TESTFLIGHT[*]]:FOR[zTestFlight]
{
	MODULE
	{
		name = ModuleTestLite
		configuration = #$../TESTFLIGHT,0/name$
		maxData = 10000
		techTransferMax = 2000
		techTransfer = #$../TESTFLIGHT,0/techTransfer$
		dataRate = #$../TESTFLIGHT/dataMult$
		ratedBurnTime = #$../TESTFLIGHT,0/ratedBurnTime$
		overBurnTime = #$../TESTFLIGHT,0/overBurnTime$
		ratedContinuousBurnTime = #$../TESTFLIGHT,0/ratedContinuousBurnTime$
		#../TESTFLIGHT/thrustModifier {}
		techTransferGenerationPenalty = #$../TESTFLIGHT,0/techTransferGenerationPenalty$
		isSolid = #$../TESTFLIGHT,0/isSolid$
		reliabilityCurve
		{
			// Create first key
			key10 = 0
			key11 = #$../../TESTFLIGHT,0/failChanceStart$
			
			// Calculate kink time
			key20 = #$../../TESTFLIGHT,0/kinkH$
			@key20 *= 5000
			@key20 += 1000
			
			// Calculate kink value
			key21 = #$../../TESTFLIGHT,0/failChanceEnd$
			@key21 -= #$../../TESTFLIGHT,0/failChanceStart$
			@key21 *= #$../../TESTFLIGHT,0/kinkV$
			@key21 += #$../../TESTFLIGHT,0/failChanceStart$
			
			// Calculate kink tangent
			key22 = #$../../TESTFLIGHT,0/failChanceEnd$
			@key22 -= #$../../TESTFLIGHT,0/failChanceStart$
			@key22 *= 0.0001
			@key22 *= #$../../TESTFLIGHT,0/kinkW$
			// now average it with the linear tangent to the endpoint
			key221 = #$../../TESTFLIGHT,0/failChanceEnd$
			@key221 -= #$key21$
			key222 = 10000
			@key222 -= #$key20$
			@key221 /= #$key222$
			@key222 = #$../../TESTFLIGHT,0/kinkW$
			@key222 *= -1
			@key222 += 1
			@key221 *= #$key222$
			@key22 += #$key221$
			
			
			// Create end key
			key30 = 10000
			key31 = #$../../TESTFLIGHT,0/failChanceEnd$
			key32 = 0 // flat intangent
			
			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$
			
			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
			!key221 = DEL
			!key222 = DEL
		}
		ignitionCurve
		{
			// Create first key
			key10 = 0
			key11 = #$../../TESTFLIGHT,0/ignitionReliabilityStart$
			
			// Calculate kink time
			key20 = #$../../TESTFLIGHT,0/kinkH$
			@key20 *= 5000
			@key20 += 1000
			
			// Calculate kink value
			key21 = #$../../TESTFLIGHT,0/ignitionReliabilityEnd$
			@key21 -= #$../../TESTFLIGHT,0/ignitionReliabilityStart$
			@key21 *= #$../../TESTFLIGHT,0/kinkV$
			@key21 += #$../../TESTFLIGHT,0/ignitionReliabilityStart$
			
			// Calculate kink tangent
			// tangent = Y/X
			key22 = #$../../TESTFLIGHT,0/ignitionReliabilityEnd$
			@key22 -= #$../../TESTFLIGHT,0/ignitionReliabilityStart$
			@key22 *= 0.0001
			@key22 *= #$../../TESTFLIGHT,0/kinkW$
			// now average it with the linear tangent to the endpoint
			key221 = #$../../TESTFLIGHT,0/ignitionReliabilityEnd$
			@key221 -= #$key21$
			key222 = 10000
			@key222 -= #$key20$
			@key221 /= #$key222$
			@key222 = #$../../TESTFLIGHT,0/kinkW$
			@key222 *= -1
			@key222 += 1
			@key221 *= #$key222$
			@key22 += #$key221$
			
			
			// Create end key
			key30 = 10000
			key31 = #$../../TESTFLIGHT,0/ignitionReliabilityEnd$
			key32 = 0 // flat intangent
			
			// Create the keys
			key = #$key10$ $key11$
			key = #$key20$ $key21$ $key22$ $key22$
			key = #$key30$ $key31$ $key32$ $key32$
			
			// Clean up
			!key10 = DEL
			!key11 = DEL
			!key20 = DEL
			!key21 = DEL
			!key22 = DEL
			!key221 = DEL
			!key222 = DEL
			!key30 = DEL
			!key31 = DEL
			!key32 = DEL
		}
	}

	!TESTFLIGHT,0 {} // remove the node we processed

	MM_PATCH_LOOP {}
}
